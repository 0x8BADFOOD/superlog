/**
 * https://github.com/wangfei1975/superlog
 * Build file using win64 libraries.
 * 
 * TODO allow the project to be built for mac64.
 */
apply plugin: "java"

defaultTasks = ["clean", "deploy", "docs"]
version = "1.0"

def WORKSPACE_DIR = "../"
def MAIN_CLASS_NAME = "feiw.Slogmain"
def DEPLOY_DIR = "./"

sourceSets.main.java.srcDirs = ["./src"]
sourceSets.main.resources.includes = ["./main/resources", "./main/screenshots"] // latter location probably not important
dependencies {
	compile fileTree(dir: "./lib", include: "*.jar")
	compile fileTree(dir: "./lib/win64", include: "*.jar")
}

// http://stackoverflow.com/questions/21721119/creating-runnable-jar-with-gradle
jar {
	manifest {
		attributes "Implementation-Title": "github.com/wangfei1975/superlog",
				   "Implementation-Version": version,
				   "Main-Class": "${MAIN_CLASS_NAME}",
				   // TODO hardcoded for now, maybe one can get it from the defined dependencies going forward
				   "Class-Path": "lib/gson-2.2.4.jar lib/win64/swt-win64.jar"
	}
	
	doFirst {
		println("Creating JAR file: " + jar.archivePath);
	}
}

task deploy(dependsOn: jar) << {
	println("Deploying Jar to location: " + removeLastChar(new File(DEPLOY_DIR).getAbsolutePath()) + jar.archiveName);
	
	copy {
		from jar.archivePath
		into DEPLOY_DIR
	}
}

task docs() << {
	println()
	println("==================================================================")
	println("To execute: ")
	println("cd " + removeLastChar(new File(DEPLOY_DIR).getAbsolutePath()))
	println("java -jar " + jar.archiveName);
	println("==================================================================")
}

def removeLastChar(String specifiedString) {
	if (specifiedString == null)
		throw new GradleException("Specified String is NULL!");
	if (specifiedString.length() == 0)
		throw new GradleException("Specified String is empty!");
	return specifiedString.substring(0, specifiedString.length()-1);
}
